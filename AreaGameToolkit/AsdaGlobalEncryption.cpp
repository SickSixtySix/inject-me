// InjectMe
#include "AsdaGlobalEncryption.hpp"

using namespace InjectMe::Utils;
using namespace InjectMe::Network;

sf::Uint8 AsdaGlobalEncryptionKey[] =
{
	0xDE, 0x5F, 0xAD, 0xF6, 0x92, 0xE2, 0x71, 0x4F, 0xA0, 0x04, 0xD0, 0x09, 0xCB, 0x66, 0xB7, 0x6B,
	0x16, 0xC3, 0x47, 0x5B, 0x00, 0xAF, 0xD7, 0x3A, 0x49, 0xE9, 0x57, 0xD3, 0x8B, 0x74, 0x12, 0xA9,
	0x83, 0xFA, 0xDF, 0xC8, 0xE4, 0x38, 0x9C, 0xEF, 0x8F, 0xBC, 0x95, 0x70, 0x89, 0x4A, 0x3B, 0xED,
	0xFF, 0xF5, 0x4D, 0xFF, 0x86, 0x78, 0x6C, 0xF1, 0x02, 0x88, 0x62, 0xB2, 0xDC, 0xBF, 0x65, 0xC9,
	0x2B, 0xBE, 0x95, 0x54, 0x6E, 0xD2, 0x95, 0xB1, 0xE0, 0xCD, 0x85, 0xEE, 0xBB, 0x16, 0x91, 0xE5,
	0x2F, 0x8D, 0xAB, 0x46, 0xBD, 0x69, 0x34, 0x39, 0x82, 0x32, 0x4B, 0xBA, 0xF3, 0x22, 0x17, 0x08,
	0x44, 0x1D, 0xA5, 0x42, 0x8E, 0x5F, 0xD2, 0x8B, 0xC2, 0xF4, 0x56, 0x2F, 0x1F, 0xA6, 0x87, 0x5D,
	0x8A, 0xA6, 0x69, 0xD9, 0x62, 0xB6, 0x70, 0xBD, 0xB5, 0xE8, 0x0F, 0xAB, 0x1A, 0x2C, 0x79, 0xF0,
	0x4B, 0xF8, 0xAC, 0xF0, 0x5A, 0x59, 0x30, 0xD7, 0x4A, 0xA9, 0x08, 0xE7, 0x59, 0xAA, 0x2E, 0xD9,
	0x18, 0x71, 0x46, 0xB5, 0xF7, 0x52, 0x75, 0xB4, 0x3A, 0x31, 0x07, 0x00, 0xEB, 0xFD, 0x7E, 0x73,
	0x40, 0x1B, 0x64, 0xAC, 0x3F, 0xA5, 0xB2, 0xC0, 0xE3, 0x71, 0x41, 0x18, 0xC7, 0x3C, 0xFA, 0x53,
	0x2C, 0xB6, 0xC6, 0xCF, 0x8C, 0x0B, 0x97, 0x92, 0x45, 0x1C, 0x6B, 0xFB, 0xB7, 0x47, 0xF7, 0xDA,
	0x3C, 0x41, 0xE1, 0x7D, 0xFD, 0x44, 0x2A, 0x68, 0xBC, 0x6F, 0x4E, 0xB7, 0xDB, 0x97, 0x19, 0xCD,
	0x89, 0x11, 0xAA, 0x8F, 0x04, 0x37, 0x9E, 0x9F, 0xAE, 0x29, 0xB9, 0xF3, 0xA3, 0xB8, 0x21, 0x90,
	0xC8, 0x23, 0x65, 0xEA, 0xEA, 0x7F, 0xD4, 0xED, 0x67, 0x7C, 0x9B, 0x28, 0x5E, 0x15, 0xCA, 0x6D,
	0x72, 0x25, 0x39, 0xCB, 0x57, 0xB3, 0x06, 0x55, 0x13, 0xDB, 0x02, 0x4D, 0x29, 0x89, 0xF9, 0x7D,
	0x78, 0xF1, 0xF4, 0xFC, 0xF9, 0xD8, 0x0F, 0xE6, 0x3D, 0x34, 0x53, 0x27, 0xB3, 0xDD, 0xAD, 0x7F,
	0x80, 0x43, 0x0B, 0xF5, 0x21, 0xC2, 0x9A, 0x75, 0xD0, 0x86, 0x6E, 0xBE, 0xEE, 0xD1, 0x2A, 0x76,
	0x3E, 0x0A, 0xAF, 0x3F, 0x93, 0xC9, 0xEF, 0xEB, 0xA1, 0x30, 0x76, 0x24, 0x17, 0x9C, 0xF2, 0x12,
	0x4C, 0xB1, 0x07, 0xD6, 0x28, 0xE3, 0x5F, 0xA8, 0x6F, 0xA2, 0x5C, 0x94, 0xEC, 0xEC, 0x40, 0x0E,
	0x10, 0xD1, 0x36, 0x0A, 0xE9, 0xDA, 0x2E, 0x26, 0xD6, 0x80, 0xE4, 0x7A, 0x79, 0xA1, 0x25, 0x01,
	0x05, 0x37, 0xB0, 0xD5, 0xF6, 0x96, 0x84, 0xDF, 0x9B, 0x9E, 0x51, 0x05, 0x74, 0xE5, 0x11, 0x42,
	0xDD, 0xC5, 0x24, 0x90, 0x56, 0x5D, 0xFC, 0x8D, 0xE7, 0x03, 0xC4, 0x8C, 0xE6, 0x1D, 0x8A, 0xB4,
	0x3B, 0x55, 0xBF, 0xE1, 0x20, 0xA7, 0xC4, 0xA4, 0x09, 0x83, 0x14, 0x99, 0x15, 0xFE, 0x48, 0x35,
	0xA4, 0x19, 0x48, 0x63, 0xFB, 0x6D, 0x7C, 0x2D, 0x0C, 0x82, 0xC6, 0x50, 0x59, 0xB0, 0x0D, 0x03,
	0x0D, 0x4E, 0xA7, 0x67, 0x59, 0x1E, 0xA8, 0xE0, 0x54, 0x73, 0xC3, 0x8E, 0xC0, 0x1A, 0x64, 0x58,
	0x9D, 0x68, 0x7E, 0x58, 0x88, 0x81, 0x63, 0x87, 0x94, 0x35, 0x06, 0xF8, 0x52, 0x36, 0x6C, 0xD3,
	0x22, 0x61, 0xCE, 0x9D, 0xA2, 0xDE, 0xD8, 0xA3, 0x6A, 0x7B, 0x0C, 0x1B, 0x1E, 0x2B, 0x0E, 0xB8,
	0x26, 0x91, 0x38, 0x1F, 0x77, 0x84, 0x5B, 0x6A, 0xE8, 0xDC, 0x3E, 0x5A, 0x33, 0x10, 0x45, 0x99,
	0x87, 0xD5, 0xC1, 0x3D, 0x2D, 0x20, 0xF2, 0x92, 0xE2, 0xC7, 0xAE, 0xC5, 0x32, 0x60, 0x01, 0x9F,
	0xBA, 0x27, 0x5C, 0x49, 0x96, 0x23, 0x1C, 0x98, 0x4F, 0x9A, 0xCE, 0x4C, 0x60, 0xD4, 0x61, 0x81,
	0x31, 0xB9, 0xFE, 0xBB, 0x66, 0x43, 0x16, 0x72, 0x7A, 0x13, 0xA0, 0x32, 0x7B, 0xC1, 0x2C, 0xAD
};

AsdaGlobalEncryption *AsdaGlobalEncryption::s_instance = nullptr;

AsdaGlobalEncryption::AsdaGlobalEncryption() {}

AsdaGlobalEncryption* AsdaGlobalEncryption::Instance()
{
	if (s_instance == nullptr)
		s_instance = new AsdaGlobalEncryption();

	return s_instance;
}

void AsdaGlobalEncryption::Encrypt(Buffer &buffer)
{
	// —читывание длины пакета
	sf::Uint16 packetLength;
	buffer.Read(1, packetLength);

	// —читывание ключа шифровани€ пакета
	sf::Uint8 packetKey;
	buffer.Read(3, packetKey);

	// Ўифрование пакета
	Encrypt(buffer.GetMemory().lpAddress + 4, packetKey, 4, packetLength - 5);
}

void AsdaGlobalEncryption::Encrypt(void *data, sf::Uint8 key, size_t offset, size_t length)
{
	auto buffer = reinterpret_cast<char*>(data);
	for (size_t i = 0; i < length; i++)
		buffer[i] ^= AsdaGlobalEncryptionKey[2 * AsdaGlobalEncryptionKey[247]] ^ AsdaGlobalEncryptionKey[key * 2 + 1] ^ AsdaGlobalEncryptionKey[(255 - (i - 4 + offset) % 256) * 2 + 1] ^ 0x09;
}